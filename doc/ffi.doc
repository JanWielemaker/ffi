\documentclass[11pt]{article}
\usepackage{times}
\usepackage{pl}
\usepackage{plpage}
\usepackage{html}
\usepackage{tabulary}
\sloppy
\makeindex

\onefile
\htmloutput{.}				% Output directory
\htmlmainfile{clib}			% Main document file
\bodycolor{white}			% Page colour

\renewcommand{\runningtitle}{ffi -- call C functions dynamically}

\begin{document}

\title{SWI-Prolog dynamic C function calling}
\author{Jan Wielemaker \\
	VU University of Amsterdam \\
	The Netherlands \\
	E-mail: \email{J.Wielemaker@vu.nl}}

\maketitle

\begin{abstract}
This document describes library(ffi), a library to wrap calls to C
functions in shared objects (DLLs) dynamically. The library uses an
external C~preprocessor and the C header files to create the calling
template, register types such as structures and enums and make the
values for \verb$#define$ constants available from Prolog. Finally, the
library provides predicates to allocate, write and read native C
data structures.
\end{abstract}

\vfill

\pagebreak
\tableofcontents

\vfill
\vfill

\newpage

\section{Introduction}
\label{sec:ffi-intro}

One of the oldest foreign interfaces for Prolog was provided by Quintus
Prolog. In this interface the C~functions that are to be made available
from Prolog are, together with their parameter types, declared in
Prolog. A subsequent call to \nopredref{load_foreign_files}{1-3}
attaches the C library, making the functions available as predicates.
This interface is also available from SICStus Prolog, Ciao and
SWI-Prolog by means of library(qpforeign). There are several ways to
realise the interface. The SWI-Prolog library generates C wrapper code,
compiles this to a shared object and loads this. Other implementations
may use a library for dynamically calling C functions similar to what is
underlying the library that is the subject of this document. The Quintus
interface only provides support for a limited set of C~types:
\ctype{long}, \ctype{double}, \ctype{single}, \ctype{char*} and the
Prolog specific types for atom handles and term references
(\ctype{atom_t} and \ctype{term_t} in SWI-Prolog).

Most native C library APIs rely on a much richer type system than what
is supported by the Quintus interface. Realising a Prolog wrapper for
such an API typically consists of two parts: a C part that wraps the
original interface into one which simple types and operations and a
Prolog part that recreates a high-level interface that handles complex
data structures using multiple calls on the C~layer.

With SWI-Prolog we took a different approach: a foreign predicate is a
C~function that takes an array of \ctype{term_t} Prolog terms and can
control Prolog success, failure, exceptions and non-determinism. There
is a rich set of C~functions to examine \ctype{term_t} handles and make
results available using \jargon{unification}. This approach has several
advantages and disadvantages:

\begin{description}
    \item[Flexible]
The interface allows for writing high-level Prolog predicates
entirely in C.

    \item[Portable]
Making the functions available as Prolog predicates is controlled from C
using PL_register_foreign().  As a result the dynamic loader only has
to load the shared object can call a \ctype{void} function that takes
no argumens.  This functionality is easily provided on any modern OS.

    \item[Fast]
As the entire translation from complex Prolog data to C~data and back
is done in C based on efficient C low-level primitives, the result
performs optimal.

    \item[Verbose]
Although not particularly hard, analysing and building Prolog terms from
C is a rather verbose activity and requires C programming skills that
are not widespread amoung Prolog programmers.

    \item[Error prone]
Error handling and disposing partly created C data structures after
an error is encountered often results in complicated control flow.
To some extend this can be avoided by using the C++ wrapper.
\end{description}

We promote SWI-Prolog as a \jargon{glue language}. Other languages in
this area, such as Lua or Python, provide a dynamic calling interface
using the same spirit as the above described Quintus interface, but with
a wider coverage of supported types. This is in part facilitated because
these languages have a closer resemblance to C, making the mapping more
straight forward.

One of the issues is access to user-defined C types, \jargon{struct},
\jargon{union} and \jargon{union} and \jargon{enum}, as well as access
to C \jargon{preprocessor} symbols (\verb$#define$). The Python
\const{ctypes} package fixes some of these issues by extracting
information from the library debug information. Its package
\href{https://github.com/yuce/pyswip}{pyswip} provides an interface to
SWI-Prolog based on the \const{ctypes} package. Studying this package
provided inspiration for the library described here.

Modern C APIs typically abstract from concrete C data types such as
\ctype{int} or \ctype{long}. By defining their own type system and
binding that centrally to the base types using \texttt{typedef}
declarations the system is easily ported to different OSes and
C~compilers. For similar reasons they use a lot of preprocessor macros.
From \file{pyswip/core.py} we learn that these definitions from the
SWI-Prolog header \file{SWI-Prolog.h} are repeated in Python syntax and,
as \file{pyswip} is a bit outdated, several of the definitions are now
incorrect or do not deal with e.g., portability to 64-bit machines
correctly.  We need some way to extract up-to-date information from
the library automatically.

All required information is available from e.g., the \program{gcc} debug
information when compiled using \exam{-gdwarf-2 -g3}. However, most
libraries are not compiled this way and, if another C~compiler is used,
cannot be compiled this way. Often debug information is stripped from
release binaries.

This library opts for a fairly portable route, but requires access to
a C~preprocessor and the header files that come with the library.  This
results in code as below to get access to the Linux statfs() function,
providing information about the file system on which a file resides:

\begin{code}
cpp_const('ST_MANDLOCK').
cpp_const('ST_NOATIME').
...

:- c_import("#include <sys/vfs.h>",
            [ libc ],
            [ statfs(string, -struct(statfs), [int])
            ]).
\end{code}

The c_import/3 directive is compiled into Prolog statements that
represent the involved types, requested macros (see \secref{cpp-const})
and a \jargon{lazy} binding definition. The first call to statfs/3
actually loads the library and creates the wrapper predicate. The type
information is obtained by processing the first (string) argument using
the C~preprocessor and parsing the result into a Prolog AST. For this
reason the library contains a full parser of the C99 standard including
GCC extensions. Given the AST and the above declaration we can

\begin{itemize}
    \item Find the prototype for statfs()
    \item Find all involved types by expanding the parameter types and
    return type until we reach to core C~types.
    \item Find the constants represented by \texttt{ST_MANDLOCK}, etc.
    by adding variable declarations to the provided header and examining
    the AST that represents these variable declarations.
    \item The Prolog parameter declaration is verified to be consistent
    with the prototype and is used to guide the mapping from Prolog
    data to C and back.
\end{itemize}

As a result, we can verify the file system supports access time
recording. To do this we first define statfs/2, dealing with the POSIX
success/error conventions. The \arg{FsStat} variable is bound to a
\jargon{pointer wrapper} that maintains the type (\exam{struct statfs}).
The utility c_load/2 fetches the \exam{[f_flags]} field from the
structure pointer. The \exam{'ST_NOATIME'} is replaced by its numerical
value based on \jargon{term expansion} in Prolog.

\begin{code}
statfs(File, FsStat) :-
    statfs(File, FsStat, Status),
    posix_status(Status, statfs, file, File).

maintains_access_time(File) :-
    statfs(File, FsStat),
    c_load(FsStat[f_flags], Flags),
    Flags /\ 'ST_NOATIME' =:= 0.
\end{code}


\subsection{Disadvantages}

Above we created a binding that accesses a C~library call and extracts
information from the filled structure without writing any C. We did not
need to worry about the structure layout, nor about the type of the
\const{f_flags} field (\ctype{__fsword_t}). This seems to good to be
true. What are the disadvantages? We give them below, split into new
complexities and limitations. For each we hint at the (im)possibility
for remedying.

\subsubsection{New complexities and disadvantages}

\paragraph{Finding a compatible C preprocessor and headers}

Our library uses library(process) to talk to the C~preprocessor and
assumes this is correctly configured to find the header files needed for
the target libraries. This currently is configured for Linux and
\program{gcc}. This should cover other popular options and a mechanism
for the user to provide rules that match the target.

On Windows, \href{http://www.mingw.org/}{MinGW} can provide a compatible
toolchain. On MacOS Xcode needs to be installed. Note that applications
may provide precompiled \fileext{qlf} files (see qcompile/1) which
allows a user to access the foreign code without access to a
C~preprocessor and the header files.


\paragraph{Finding libraries}

The interface requires the real file that represents the shared object
to be loaded. C~toolchains come with a complicated OS and compiler
dependent search strategy to find the concrete library file for the
correct architecture and of the correct version. All we can probably do
is to replicate some of this process for popular platforms, allow users
to extend the rules and ultimately the user can specify the location as
an absolute path.


\paragraph{Portability}

The portability is notably limited by the low-level library doing the
dynamic calling of C functions. This library is in part written in
assembler and requires details on the target C~calling conventions,
i.e., which parameters are placed where and where can the return value
be found. The Prolog wrapper around that is only a new pages and thus
easily replaced to use another low-level library.


\paragraph{Performance}

Implemented on top of the existing C-interface, this interface is by
definition slower. In addition, Prolog wrappers may be generated to
allocate memory for output arguments and the allocated memory is subject
to malloc and the Prolog atom garbage collection while in several cases
an automatic variable (allocated on the stack) suffices to hold the
output. The automatically generated interface often does not provide a
natural interface to the target resource, in which case a Prolog library
is required to provide the desired interface. Although this is typically
far less work than doing this in C, the result generally performs less.


\subsubsection{Limitations}

\paragraph{Struct pointers, but no struct}

The underlying \href{https://sourceware.org/libffi/}{libffi} library
cannot create dynamic calls to functions that have a structure as
argument, nor deal with functions that return a struct. For example we
cannot wrap mallinfo() with the synopsis as below.

\begin{code}
#include <malloc.h>

struct mallinfo mallinfo(void);
\end{code}

Accessing such a function is possible by defining a C source using the
code below. This file can be compiled to a shared object and the source
can be used by this library to access our wrapper library. The
disadvantage of this approach is that it requires a fully operational C
development toolchain, knowledge on how to operate it and the need to
create and deploy the wrapper shared object. Unlike the native
SWI-Prolog approach though our library is completely independent from
SWI-Prolog and thus \file{SWI-Prolog.h} nor the library
\file{libswipl.so} is needed.

\begin{code}
#include <malloc.h>
void
pl_mallinfo(struct mallinfo *info)
{ *info = pl_mallinfo();
}
\end{code}

We assume that it is possible to extend the low-level assembly code
used to build the dynamic calls to support structures if it is told
how large the structures are.


\paragraph{Bitfields}

The current version does not support bitfields (\exam{unsigned name :
bits}) fields in structs.

This is not a fundamental restriction see also \jargon{Struct layout}
below.

\paragraph{Struct layout}

The Prolog library rewrites a struct type into a sequence of fields
where each field is either a basic scalar type, a struct, union or
enum or an array of any of these. It first computes the layout, size and
alignment of sub structs and unions. The layout of the struct is
computed by placing the fields linearly in memory while adding padding
fields required to satisfy the alignment restrictions (see c_alignof/2).

This is the default algorithm used by C compilers, but many compilers
support additional attributes to control the layout.  Such attributes
are currently ignored.  Accessing a struct with such attributes will
lead to incorrect values. Additional rules can be added to resolve this.


\paragraph{Inline functions and macros}

Part of the C API of a library may look like functions but are in fact
implemented as inline functions or macros. For example, the \file{glibc}
(glibc is the standard C runtime library on Linux) function stat() to
obtain information about an entry in the filesystem has the synopsis
below. Binding this as stat() though results in an existence error.

\begin{code}
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

int stat(const char *pathname, struct stat *statbuf);
\end{code}

What is wrong? Going through the headers we find stat() as an inline
function that calls __xstat() with an extra parameter that defines the
version that should be \exam{'_STAT_VER'}. We now have two options. We
can use the same strategy as for mallinfo() above and define our own
wrapper library that provides a stat() as a proper function or we can
use the code below.

\begin{code}
cpp_const('_STAT_VER').

:- c_import("#include <sys/types.h>
             #include <sys/stat.h>
             #include <unistd.h>",
            [ libc ],
            [ '__xstat'(int,string,-struct(stat),[int])
            ]).

stat(File, Stat) :-
    '__xstat'('_STAT_VER', File, Stat, Status),
    posix_status(Status, stat, file, File).
\end{code}

The advantage of the above is that no wrapper library is needed, but the
disadvantage is that this only works for glibc. Other POSIX runtime
libraries may provide stat() as a function or do something similar to,
but incompatible with, glibc.

\section{Making C functions available as predicates}

The binding is realised using c_import/3

\begin{description}
    \predicate{c_import}{3}{+Header, +Flags, +Functions}
Import \arg{Functions} from libraries provided by \arg{Flags}. The
\arg{Header} is a string providing C source text that makes the types of
the imported functions available. This text is handed to the configured
C~preprocessor. Normally, this string contains a series of
\exam{\#include <header>} statements. For simple projects it is also
possible to supply the actual C source file, e.g.,
\verb$"#include \"my_c.c\""$ (note the escaped double quotes).

\arg{Flags} is a list of flags that both provide the optional C~flags
such as \verb$-I$ and the libraries where the functions can be found.
Libraries may be written as e.g., \verb$-lc$, \verb$libc$ or as a
compound term for absolute_file_name/3. The library specification is
resolved to the actual library file by c_lib_path/2 from
library(clocations). Finally, a term \term{pkg_config}{Pkg, ...} may be
specified. This runs the \program{pkg-config} program using the provided
options to obtain the required flags. The example below attaches the
\file{uchardet} library.\footnote{A complete implementation is in the
file \file{uchardet.pl} of the \file{examples} directory.}

\begin{code}
:- c_import("#include <uchardet.h>",
            [ pkg_config(uchardet, '--cflags', '--libs') ],
	    ...).
\end{code}

\arg{Functions} is a list of functions that must be made available as
Prolog predicates. Each specification is a compound term whose name is
the name of the C~function to import. The arguments of the compound
provide additional hints for this library for mapping the native C types
to Prolog types. The compound has the same number of arguments as the C
function or one more if the return value of the function is used. This
last argument must be embedded in a list. The construct \verb$[void]$
may be used to forcefully ignore the return value of a function. Note
that it is bad practice to ignore the return value if this may indicate
an error condition.

Each argument is optionally wrapped in \exam{+type} or \exam{-type} to
indicate an input or output argument. An output argument is realised by
passing a pointer to an object of the required type and, upon completion
of the function, reading the value from this pointer. Next, the argument
may be wrapped in \exam{*(type)} to indicate it is a pointer. The
supported types are given below:

\begin{description}
    \termitem{int}{}
The argument is to be mapped to a Prolog integer. This is compatible
with C integers of all supported sizes. If the argument is an input
argument a domain check is performed to validate that the (unbounded)
Prolog integer can be represented by the bounded C integer. If the
argument is an output argument the C type must be a pointer to a C
integer. A buffer of sufficient size is allocated and after completion
of the function the result is extracted from the pointer.

The \const{int} value is also compatible with an \ctype{enum} typed
C~argument, returning the enum value as an integer. See also
\const{enum} below.
    \termitem{float}{}
Supports C floats and doubles.
    \termitem{string}{}
\nodescription
    \termitem{string}{Encoding}
As input argument, transform the Prolog data into a C string.
\arg{Encoding} defines the mapping from Prolog Unicode to the
C representation.  The default is \const{text}, using the default
encoding of the OS.  Other values are \const{iso_latin_1}, \const{utf8}
and \const{wchar_t}.  This Prolog type is compatible with the C~type
\ctype{char*}, except when \arg{Encoding} is \ctype{wchar_t}.  In this
case the C~type must be a pointer to an integer type of the same size
as \ctype{wchar_t}.
    \termitem{atom}{}
\nodescription
    \termitem{atom}{Encoding}
As \const{string} and \term{string}{Encoding} but when used for output
arguments the variable is unified with an atom rather than a string.
    \termitem{struct}{Name}
Argument is a structure of the given name. If this is an input argument,
a pointer to a structure must be supplied.  If it is an output argument
a pointer is allocated and returned.
    \termitem{union}{Name}
Argument is an union of the given name.  Otherwise this is handled the
same way as \term{struct}{Name}.
    \termitem{enum}{Name}
Argument is an enum of the given name. An enum member is mapped to a
Prolog atom. The wrapper translates between the atom and C~integer that
represent the enum encoding.  Input and output arguments are handled the
same way as \const{int}.
    \termitem{enum}{}
This can be used for enum arguments if the name of the enum is not
important or unknown.  Conversion to or from atoms is performed as
with the \term{enum}{Name} specification.  Note that an enum can
also be specified as \const{int}, which stops converstion between
atoms and the integer representation.
    \termitem{PredicateName}{Arg, \ldots}
Argument is a \jargon{closure}. The arguments of the function term are
the predicate arguments for the predicate to which the closure is mapped
and is subject to the same rules as the predicate arguments described in
this list.  See \secref{ffi-closure}
\end{description}

For \jargon{output} arguments (the function return or using a pointer
argument that is filled by the function) we need to deal with
\jargon{ownership transfer}. This is achieved using the construct
\term{~}{Type, FreeFunc}. See \secref{ffi-ownership} for details.

Finally, the following constructs are supported:

\begin{description}
    \definition{\arg{Function}(\arg{Arg}, ...) as \arg{PredicateName}}
Link the C~function \arg{Function} to the Prolog predicate
\arg{PredicateName} (an atom) rather than using the same name for
the predicate and C~function. This can be used to avoid conflicts
with, e.g., built-in predicates or to allow for wrapper predicate that
is named after the original C function.

    \definition{[\arg{Specification}]}
If the specifiation is wrapped in a list, it is \emph{optional}, i.e.,
if the target function cannot be found in the supplied headers it is
silently ignored. This can be used together with \exam{:-
if(current_predicate(Name/Arity)).} to deal with portability issues.
\end{description}

The arguments to this directive are expanded using rules for c_define/2.

    \predicate{c_define}{2}{+Term, -Replacement}
This \jargon{hook} is used for compiling c_import/3. As c_import/3 is
processed using term_expansion/2 we cannot use rules. This is
impractical as libraries and the called C functions and their arguments
may be complex to write and version or platform dependent.  This can be
resolved by defining the predicate c_define/2 and making it available in
the context of the c_import/3 directive. See
\file{examples/python/python.pl} for examples.

Note that c_define/2 has \textbf{no} relation to C \verb$#define$.  See
also cpp_macro/1.
\end{description}

\subsection{Calling variadic functions (f(x,y,...)}
\label{sec:ffi-variadic}

The current version has limited support for variadic functions, i.e.,
functions whose prototype argument list ends with \const{...}. The
arguments before the \const{...} are processed normally. Remaining
arguments must be declared and are trusted. This implies it is not yet
possible to call such functions with arbitrary arguments, but it is
possible to call them with a specific argument list.  For example,
we can print two floating point numbers using the code below.  Note
that we use the \textit{\ldots as name} construct which allows is
to create multiple call patterns to printf()

\begin{code}
:- use_module(library(ffi)).

:- c_import("#include <stdio.h>",
            [ '-lc' ],
            [ printf(string, double, double, [void]) as printf_dd
            ]).

test(X, Y) :-
    printf_dd("You entered %f and %f\n", X, Y).
\end{code}

Excess arguments (those matching the \const{...}) must use C types
rather than Prolog types. The ffi library automatically applies the
\jargon{default parameter type promotion rules} and thus, e.g.,
\ctype{short} is passed as \ctype{int}.


\subsection{Data ownership considerations}
\label{sec:ffi-ownership}

An important aspect of C~interfaces is dealing with \jargon{ownership}
of data. Arithmetic values are simply copied, avoiding this issue.
Arrays (including strings) and structures however are often dynamically
allocated on the \jargon{heap} and must be released at some point.  We
distinguish three conventions:

\begin{enumerate}
    \item The called function returns a pointer to a static memory
area.  In this case the receiver can read the returned data and must
copy data it wishes to keep before calling the API again.  This style
lost popularity as it is not \jargon{thread-safe}.

    \item Many modern APIs force the receiver to allocate memory for
receiving the data. Especially for small amount of data (often
structures) the (C) client can use an \jargon{automatic} variable to
receive the data, e.g.,

\begin{code}
    { struct stat buf;

      if ( stat(".", &buf) == 0 )
        ...
    }
\end{code}

This style is problematic if the amount of data is unknown and therefore
the buffer can be too small. In this case the API often returns
incomplete data and an error indicating the data is incomplete and often
the required size of the buffer.

    \item Finally, the API may return a pointer to dynamically allocated
memory. In this case the API also provides a function that allows the
client to tell the API it is finished with the data. The release
function may either decrement a \jargon{reference count} or immediately
destroy the data.  For example, most of the functions from the C~library
that use this style demand the caller to call free() when they no longer
need the data.
\end{enumerate}

The Prolog FFI can deal with all three styles. In the second scenario we
cannot use automatic variables as the lifetime of the Prolog call is not
immedately related to a C~stack frame. Instead, we use c_alloc/2 to
allocate space for the output. Memory allocated with c_alloc/2 is
subject to \jargon{atom garbage collection}. For the first and last
option, the FFI library creates a pointer object just as c_alloc/2. As
the called function created the object we cannot call free() on it.

The default is to do nothing. This is correct for the first style but
causes memory leaks for the third style. In this case, the argument may
be declared using \term{~}{Type, FreeFunc}. Below are a
couple of examples. The first is a trivial example based on the
C~standard library function strdup(). The other two examples are taken
from the Python interface. Most of the Python interface functions return
a pointer to a \ctype{PyObject} type where the receiver is required to
call Py_DECREF() when done. PyDict_New() returns such an object and
PyErr_Fetch() returns three objects using the output argument calling
convention. Note that we call MyPy_DECREF() which is defined in the
small support library because (1) Py_DECREF() is a macro and (2) Prolog
will call the release function in the garbage collection thread and
Python does not allow Py_DECREF() to be called asynchronously.

\begin{code}
1.  strdup(string, [~(string, free)])
2.  'PyDict_New'([~(*'PyObject', 'MyPy_DECREF')])
3.  'PyErr_Fetch'(-(~(*'PyObject', 'MyPy_DECREF')),
	          -(~(*'PyObject', 'MyPy_DECREF')),
		  -(~(*'PyObject', 'MyPy_DECREF')))
\end{code}


\subsection{Handling closures}
\label{sec:ffi-closure}

The term \jargon{closure} refers to a pointer to a C~function that is
passed to a C~function or placed in a structure. The registered
function is called on certain events. An example is qsort() from the
standard C~library that accepts a closure to compare two elements of the
array that is to be sorted. In this section we explain how qsort() can
be used through this library.\footnote{The qsort() function is used for
educational purposes and because it is widely available in C~runtime
libraries.} Below we declare the function.

\begin{code}
:- use_module(library(ffi)).
:- c_import("#include <stdlib.h>",
            [ libc ],
            [ qsort(*void, int, int, qcompare(*void, *void, [int]))
            ]).
\end{code}

The declaration above creates a predicate \nopredref{qsort}{3} that
performs a callback on the predicate qcompare/3. Note that, unlike in C,
we provide a predefined predicate that is called. This is done such that
the library can create a closure object that matches the requested
function type. If the called predicate needs to be dynamically
determined there are two options:

\begin{enumerate}
    \item Use ``\arg{Function}(\arg{Arg}, ...) as \arg{PredicateName}''
to bind different variations to different predicates.
    \item Call the specific closure predicate from the generic one
after making it available as a hook definition or global variable.
\end{enumerate}

In our example we create \nopredref{qcompare}{3} as a function that
operates on an integer array. The example uses c_load/4 to load an
\ctype{int} indirectly over the \ctype{void*} argument. Prolog compare/3
is used to compare the elements and the result is translated to an
\ctype{int} to comply with the qsort() calling convention.

\begin{code}
qcompare(Ptr1, Ptr2, Diff) :-
    c_load(Ptr1, 0, int, I1),
    c_load(Ptr2, 0, int, I2),
    compare(DiffA, I1, I2),
    diff_int(DiffA, Diff).

diff_int(<,-1).
diff_int(=, 0).
diff_int(>, 1).
\end{code}

Given this, we can sort an array of integers:

\begin{code}
sort_int_array(Ptr, Length) :-
    c_sizeof(int, ESize),
    qsort(Ptr, Length, ESize).
\end{code}

A complete example to create an array of C \ctype{int} from a Prolog
list, sort it and translate the result back to Prolog is below.

\begin{code}
sort_int_list(List, Sorted) :-
    length(List, Count),
    c_alloc(Data, int[Count]),
    fill_array(List, 0, Data),
    c_sizeof(int, ESize),
    qsort(Data, Count, ESize),
    read_array(0, Count, Data, Sorted).

fill_array([], _, _).
fill_array([H|T], I, Data) :-
    c_store(Data[I], H),
    I2 is I + 1,
    fill_array(T, I2, Data).

read_array(I, Count, Data, [H|T]) :-
    I < Count,
    !,
    c_load(Data[I], H),
    I2 is I + 1,
    read_array(I2, Count, Data, T).
read_array(_, _, _, []).
\end{code}

The predicate c_store/2 provides support for assigning a struct field
with a closure that calls a Prolog predicate.


\subsection{Accessing preprocessor constants}
\label{sec:cpp-const}

C libraries tend to make constants available using C preprocessor
macros. In many cases, these are combined using \jargon{bitwise or} to
form \jargon{flags}.  The example below is a commonly seen snippet in
C.

\begin{code}
    int fd = open("myfile", O_CREATE|O_WRONLY);
\end{code}

Constants like \const{O_CREATE} are made available from Prolog by
defining the predicate cpp_const/1 before using the c_import/3
directive. This cause c_import/3 to add code to the header to initialize
global variables with the macro value. After parsing the AST fragment
that initializes the constant is evaluated to an integer, float or
string literal.

\begin{description}
    \predicate{cpp_const}{1}{-Name} is nondet.
This hook predicate can be defined in the same module as from where the
c_import/3 directive is used. It causes c_import/3 to create clauses
cpp_const/2, \term{cpp_const}{Name, Value}. These clauses are used by a
rule for system:term_expansion/2 if library(ffi) is imported into the
current context.  This causes the following terms to be expanded:

    \begin{description}
	\termitem{Atom}{}
An atom that matches a defined cpp_const/2 fact is expanded into the
related constant.
	\termitem{'C'}{:Expression}
Expand \arg{Expression} and evaluate it. If the expression is module
qualified add the indicated module to the modules in which rules for
cpp_const/2 are searched.  The evaluation of \arg{Expression} recognises
the C operators \chr{|}, \chr{~} and \chr{\&}. The remainder is handed
to Prolog is/2. For example, we can write the following

\begin{code}
cpp_const('O_CREATE').
cpp_const('O_WRONLY').

:- c_import("#include <sys/types.h>
             #include <sys/stat.h>
             #include <fcntl.h>
             #include <unistd.h>",
	    [ '-lc' ],
	    [ open(string, int, [int]) as c_open
	    ]).

test(File) :-
    c_open(File, 'C'('O_CREATE'|'O_WRONLY'), Fd),
    posix_status(Fd, open, file, File),
    ....
\end{code}
    \end{description}
\end{description}


\subsection{Module awareness}

User defined types (structures, unions and enums) are compiled into
Prolog predicates. These definitions are local to the module that uses
the c_import/3 statement.

\input{cmem.tex}
\input{clocations.tex}
\input{cerror.tex}


\section{Portability and platform notes}

This interface requires a C~preprocessor and C~header files that are
compatible with the libraries that must be accessed. So far we used
\program{gcc} and the closely compatible \program{clang} and
\program{MinGW} compilers.

To make ffi work with other compilers the predicate cpp/2 defined in
\file{clocations.pl} must be extended or hooked using ffi:cpp_hook/2 to
tell this library how to call the C~preprocessor such that it reads from
standard input and writes to standard input. If this is not possible
\file{cdecls.c} must be extended to deal with proprocessors that cannot
read from standard input.

C compilers often come with language extensions that are notably used in
the standard headers which are needed to access system libraries and are
often included from headers shipped with many projects. These may result
in warnings from our C~parser. The way to diagnose and fix such issues
is to first collect the C~output by enabling a debug channal and
reloading your Prolog file:

\begin{code}
?- debug(ffi(dump(cpp_output, 'myfile.h'))).
?- [myfile].
\end{code}

Now, examine \file{myfile.h} and find the declarations that cannot be
parsed.  Next, run the code below, replacing the argument of ast/1 with
a string containing the text that could not be parsed, try to find out
why it fails and extend the tokenizer from \file{ctokens.pl} and/or the
parser in \file{cparser.pl},

\begin{code}
$ swipl test/debug_types.pl
?- ast("failed declaration").
\end{code}

Finding resources such as libraries is implemented by
\file{clocations.pl}. This file must be extended to improve support on
platforms.


\subsection{Windows}

We have used this interface successfully with
\href{http://www.mingw.org/}{MinGW}. Make sure that the directory
holding \program{gcc} is in \verb$%PATH%$.


\end{document}
